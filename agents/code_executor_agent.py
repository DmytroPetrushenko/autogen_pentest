import datetime
import tempfile
from autogen import ConversableAgent
from autogen.coding import DockerCommandLineCodeExecutor


class CodeExecutorAgent:
    def __init__(self, executor):
        # Create an agent with code executor configuration that uses docker.
        self.code_executor_agent = ConversableAgent(
            name=f"code_executor_agent_{datetime.datetime.now()}",
            llm_config=False,  # Turn off LLM for this agent.
            code_execution_config={"executor": executor},  # Use the docker command line code executor.
            human_input_mode="NEVER",  # Always take human input for this agent for safety.
        )

        # When the code executor is no longer used, stop it to release the resources.
        # executor.stop()

    def get_agent(self):
        return self.code_executor_agent


class DockerCodeExecutor:
    def __init__(self, docker_image="nmap_python_image"):
        # Create a temporary directory to store the code files.
        self.temp_dir = tempfile.TemporaryDirectory()

        # Create a Docker command line code executor.
        self.executor = DockerCommandLineCodeExecutor(
            image=docker_image,  # Execute code using the given docker image name.
            container_name="autogen_executor",
            timeout=10,  # Timeout for each code execution in seconds.
            work_dir=self.temp_dir.name,  # Use the temporary directory to store the code files.
        )

    def get_executor(self):
        return self.executor
