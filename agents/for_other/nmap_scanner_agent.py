from autogen import ConversableAgent


class NmapScannerAgent:
    def __init__(self, llm_model):
        self.nmap_scanner_agent = ConversableAgent(
            name="nmap_scanner_agent",
            llm_config=llm_model,
            human_input_mode="NEVER",
            code_execution_config=False,
            system_message="You are an experienced AI assistant specializing in network scanning and data management, "
                           "working in collaboration with other agents. Your primary tools include the nmap_scan_tool "
                           "for conducting network scans and the write_to_file_tool for documenting the results."
                           "Step-by-Step Instruction:"
                           "1) Receiving Input Data: You will receive the necessary input parameters for conducting "
                           "the network scan from another agent. These parameters include the host, port, and "
                           "arguments. If no specific ports or arguments are provided, you will use empty strings ("") "
                           "as defaults."
                           "2) Creating a Script: Create a script using the nmap_scan_tool and write_to_file_tool with "
                           "the provided input data."
                           "3) Executing the Script: Sends this script to code_executor_agent that it will execute "
                           "code and return a results or error."
                           "4) After the Script Execution: Once the script execution is complete, you will inform "
                           "about the task completion or failure. In case of task failure, return all stack traces of "
                           "the errors. Conclude your assistance with the phrase 'TERMINATE' at the end.\
                           Special Note: During the execution of these tasks, ensure that you do not send any interim "
                           "updates or partial responses to the user-proxy agent. Only provide the final result: "
                           "either confirming the task completion, accompanied by a descriptive summary and any "
                           "detected errors, or its non-fulfillment, supplemented with a rationale for the failure. "
                           "This approach ensures clarity and efficiency in communication between agents and users.`"
        )

    def get_agent(self):
        return self.nmap_scanner_agent
