from autogen import AssistantAgent
from typing import Optional, Union, Dict, Literal, Callable


class PlannerAgent(AssistantAgent):
    def __init__(self,
                 system_message: Optional[str],
                 llm_config: Optional[Union[Dict, Literal[False]]],
                 name: str = "planner_agent",
                 is_termination_msg: Optional[Callable[[Dict], bool]] = None,
                 max_consecutive_auto_reply: Optional[int] = None, human_input_mode: Optional[str] = "NEVER",
                 description: Optional[str] = "This agent create a pentest plan.",
                 **kwargs):
        """
                Args:
                    system_message (str): system message for the ChatCompletion inference.
                        Please override this attribute if you want to reprogram the agent.
                    llm_config (dict or False or None): llm inference configuration.
                        Please refer to [OpenAIWrapper.create](/docs/reference/oai/client#create)
                        for available options.
                    name (str): agent name.
                    is_termination_msg (function): a function that takes a message in the form of a dictionary
                        and returns a boolean value indicating if this received message is a termination message.
                        The dict can contain the following keys: "content", "role", "name", "function_call".
                    max_consecutive_auto_reply (int): the maximum number of consecutive auto replies.
                        default to None (no limit provided, class attribute MAX_CONSECUTIVE_AUTO_REPLY will be used as the limit in this case).
                        The limit only plays a role when human_input_mode is not "ALWAYS".
                    **kwargs (dict): Please refer to other kwargs in
                        [AssistantAgent](assistant_agent#__init__).
                """
        super().__init__(name, system_message, llm_config, is_termination_msg, max_consecutive_auto_reply,
                         human_input_mode, description, **kwargs)
