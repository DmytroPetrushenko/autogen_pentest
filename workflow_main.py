from autogen import register_function, GroupChat, GroupChatManager
from agents.code_executor_agent import CodeExecutorAgent, DockerCodeExecutor
from agents.human_proxy_agent import HumanProxyAgent
from agents.nmap_scanner_agent import NmapScannerAgent
from llm.lm_studio import start_llm_in_studio
from tools.write_to_file import write_to_file
from tools.nmap_tool import nmap_scanner
from utils.os_utils import get_llm_urls_list_from_config

llm_urls_list = get_llm_urls_list_from_config()
lm_studio_base_url = "http://localhost:1234/v1"

llama_1 = start_llm_in_studio(base_url=lm_studio_base_url,
                              model_api=llm_urls_list[0]
                              )
llama_2 = start_llm_in_studio(base_url=lm_studio_base_url,
                              model_api=llm_urls_list[1]
                              )

# create a code executor based on docker
code_executor = DockerCodeExecutor().get_executor()

# create the gents
code_executor_agent = CodeExecutorAgent(executor=code_executor).get_agent()
nmap_scanner_agent = NmapScannerAgent(llm_model=llama_1).get_agent()
human_proxy_agent = HumanProxyAgent(llm_config=llama_2).get_agent()


# Register the nmap scanner function.
register_function(
    nmap_scanner,
    caller=nmap_scanner_agent,  # The assistant agent can suggest calls to the calculator.
    executor=code_executor_agent,  # The user proxy agent can execute the calculator calls.
    name="nmap_scanner",  # By default, the function name is used as the tool name.
    description="A nmap scanner used for network exploration, host discovery, and security auditing.",
    # A description of the tool.
)

# Register the write to file function.
register_function(
    write_to_file,
    caller=nmap_scanner_agent,  # The assistant agent can suggest calls to the calculator.
    executor=code_executor_agent,  # The user proxy agent can execute the calculator calls.
    name="write_to_file",  # By default, the function name is used as the tool name.
    description="A tool - write a data to a file.",  # A description of the tool.
)

# group_chat = GroupChat(agents=[human_proxy_agent, nmap_scanner_agent, code_executor_agent], max_round=12)
# group_chat_manager = GroupChatManager(groupchat=group_chat)
#
# group_chat_manager.initiate_chat()

human_proxy_agent.initiate_chat(
    recipient=nmap_scanner_agent,
    message="scan host:'127.0.0.1' ports: 18412, 27036, 27060, 33060"
)
