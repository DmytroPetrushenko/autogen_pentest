import json
import os
from autogen import config_list_from_json, ConversableAgent, UserProxyAgent, GroupChat, GroupChatManager

from tools.for_group_chat.common_tools import read_from_file, write_to_file
from tools.for_group_chat.msf_tools import msf_console_scan_tool
from utils.groupchat_utils import registration_tools_in_agents, get_config_list_from_json

PRELIMINARY_MODULES = 'preliminary_modules.txt'
AUXILIARY_MODULES = 'auxiliary_modules.txt'


def create_manager_pentest_2_flow(main_input: str) -> None:
    config_list = get_config_list_from_json('gpt-4-turbo-2024-04-09')

    llm_config_team_lead = {"config_list": config_list, "cache_seed": 42}
    llm_config_pentest = {"config_list": config_list, "cache_seed": 10045}
    llm_config_chat_manager = {"config_list": config_list, "cache_seed": 10000045}

    team_lead = ConversableAgent(
        name="team_lead",
        llm_config=llm_config_team_lead,
        system_message="You are the Team Lead."
                       "GOAL: Your task is to create a pentesting plan based on allowed Metasploit modules and a "
                       "security report."
                       "ITEMS:"

        # 1st chapter - preliminary pentest to find out everything about the target
                       "Chapter 1: Create a pentest plan based on preliminary Metasploit modules. "
                       "Continue to step 1.1."
                       f"    Step 1.1: Request the preliminary modules list from the Pentest agent. There is "
                       f"{PRELIMINARY_MODULES}. Continue to step 1.2."
                       "     Step 1.2: Receive the preliminary modules list from the Pentest agent. Continue to "
                       "step 1.3."
                       "     Step 1.3: Create preliminary pentesting tasks based on the preliminary modules list. "
                       "Continue to step 1.4."
                       "     Step 1.4: Send this task to the Pentest agent. Continue to Chapter 2."

        # 2nd chapter - auxiliary pentest to analyze the identified findings
                       "Chapter 2: Create a pentest plan based on the identified findings and auxiliary Metasploit modules. "
                       "Continue to step 2.1."
                       "    Step 2.1: Request the auxiliary modules list from the Pentest agent. There is {AUXILIARY_MODULES}."
                       " Continue to step 2.2."
                       "     Step 2.2: Classify the identified findings and create a few pentesting plans, united in "
                       "one common plan as chapters for the Pentest agent, based on the auxiliary modules list. Continue to "
                       "step 2.3."
        # 3rd chapter - execute common pentesting plan by the chapters
                       "     Step 2.3: Send the current chapter to the Pentest agent. Continue to step 2.4."
                       "     Step 2.4: Analyze the results and create an additional penetration testing plan based on "
                       "these results. Send it to the Pentest agent for execution. Continue to step 2.5."
                       "     Step 2.5: If all chapters have been executed by the Pentest agent, continue to Chapter 3. "
                       "Otherwise, take the next chapter from the common plan and send it to the Pentest agent. Continue to step 2.4."

        # 3rd chapter - create a security report based on all results
                       "Chapter 3: Create a security report. Continue to step 3.1."
                       "     Step 3.1: Create a security report based on all results obtained from the Pentest agent. "
                       "Continue to step 3.2."
                       "     Step 3.2: Ask the Pentest agent to write the security report to a file. Continue to step 3.3."
                       "     Step 3.3: After the Pentest agent writes the security report to a file, thank them and "
                       "add 'TERMINATE' at the end of your message."

    )

    pentest_agent = ConversableAgent(
        name="pentest_agent",
        llm_config=llm_config_pentest,
        system_message="You are the Pentest Agent. "
                       "GOAL: Your task is to conduct testing according to the tasks received from the Team Lead. "
                       "Highlights: Metasploit modules is in 'modules.txt'. USE only your tools!"
                       "STEPS: "
                       "Step 1: Receive a task from the Team Lead. Continue to step 2."
                       "Step 2: Execute it. "
    )

    executor = ConversableAgent(
        name="executor_agent",
        llm_config=False,  # Turn off LLM for this agent.
        code_execution_config={
            "work_dir": "coding",
            "use_docker": False
        },
        human_input_mode="NEVER",  # Never take human input for this agent for safety.
    )

    init_agent = UserProxyAgent(
        name="Initializer_agent",
        human_input_mode="NEVER",
    )

    # registration_tools_in_agents(pentest_agent, executor,  "msf_tools")

    pentest_agent.register_for_llm(name=msf_console_scan_tool.__name__, description=msf_console_scan_tool.__doc__)(
        msf_console_scan_tool)
    executor.register_for_execution(name=msf_console_scan_tool.__name__)(msf_console_scan_tool)

    pentest_agent.register_for_llm(name=read_from_file.__name__, description=read_from_file.__doc__)(read_from_file)
    executor.register_for_execution(name=read_from_file.__name__)(read_from_file)

    pentest_agent.register_for_llm(name=write_to_file.__name__, description=write_to_file.__doc__)(write_to_file)
    executor.register_for_execution(name=write_to_file.__name__)(write_to_file)

    def state_transition(last_speaker, groupchat):
        messages = groupchat.messages
        if last_speaker is init_agent:
            return team_lead
        if last_speaker is team_lead:
            return pentest_agent
        if last_speaker is pentest_agent:
            if 'tool_calls' in messages[-1].keys():
                return executor
            return team_lead
        if last_speaker is executor:
            return team_lead

    groupchat = GroupChat(
        agents=[init_agent, team_lead, pentest_agent, executor],
        messages=[],
        max_round=20,
        speaker_selection_method=state_transition,
        allow_repeat_speaker=None,
        speaker_transitions_type="allowed"

    )
    manager = GroupChatManager(
        groupchat=groupchat,
        llm_config=llm_config_chat_manager,
        is_termination_msg=lambda msg: "TERMINATE" in msg["content"],
        human_input_mode="NEVER"
    )

    init_agent.initiate_chat(
        manager, message=f"{main_input}"
    )
