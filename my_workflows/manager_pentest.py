import os
from autogen import config_list_from_json, ConversableAgent, UserProxyAgent, GroupChat, GroupChatManager
from utils.groupchat_utils import registration_tools_in_agents


def create_manager_pentest_flow() -> None:
    config_list = config_list_from_json(
        "OAI_CONFIG_LIST",
        file_location=os.getcwd(),
        filter_dict={
            "model": ["gpt-4-turbo-2024-04-09"],
        }
    )

    llm_config_team_lead = {"config_list": config_list, "cache_seed": 42}
    llm_config_pentest = {"config_list": config_list, "cache_seed": 10045}
    llm_config_chat_manager = {"config_list": config_list, "cache_seed": 10000045}

    team_lead = ConversableAgent(
        name="team_lead",
        llm_config=llm_config_team_lead,
        system_message="You are the Team Lead. "
                       "GOAL: Your task is to create a website testing plan based on the allowed Metasploit modules "
                       "and adjust the plan according to the obtained results. "
                       "Allowed modules: ['auxiliary/scanner/http/http_version', 'auxiliary/scanner/http/dir_scanner', 'auxiliary/scanner/http/robots_txt', 'auxiliary/scanner/http/login', 'auxiliary/scanner/http/csrf', 'auxiliary/scanner/http/sql_injection', 'auxiliary/scanner/http/command_injection']. "
                       "STEPS: "
                       "Step 1: Get a task from init_agent (a human) and create a pentest plan based on it and the allowed modules. "
                       "Step 2: Send a scan task to the pentest agent according to the plan. "
                       "Step 3: Get a scan result from the pentest agent, analyze the result, and modify the plan as needed. Don't use previously used modules when modifying the plan. "
                       "Step 4: Send a scan task to the pentest agent according to the modified plan. "
                       "Step 5: Repeat steps 3 and 4 until the plan is completed. "
                       "Step 6: Create a security report based on OWASP and CWE."
    )

    pentest_agent = ConversableAgent(
        name="pentest_agent",
        llm_config=llm_config_pentest,
        system_message="You are the Pentest Agent. "
                       "GOAL: Your task is to conduct testing according to the tasks received from the Team Lead. "
                       "Return concise reports instead of raw results obtained from the tools. "
                       "STEPS: "
                       "Step 1: Receive a scan task from the Team Lead. "
                       "Step 2: Execute the scan using the specified Metasploit module and parameters. "
                       "Step 3: Analyze the scan results and create a concise report. "
                       "Step 4: Send the report back to the Team Lead. "
                       "Step 5: Repeat the process for each new task received."
    )


    executor = ConversableAgent(
        name="executor_agent",
        llm_config=False,  # Turn off LLM for this agent.
        code_execution_config={
            "work_dir": "coding",
            "use_docker": False
        },
        human_input_mode="NEVER",  # Never take human input for this agent for safety.
    )

    init_agent = UserProxyAgent(
        name="Initializer_agent",
        human_input_mode="TERMINATE"
    )

    registration_tools_in_agents(pentest_agent, executor,  "msf_tools")


    def state_transition(last_speaker, groupchat):
        messages = groupchat.messages
        if last_speaker is init_agent:
            return team_lead
        if last_speaker is team_lead:
            return pentest_agent
        if last_speaker is pentest_agent:
            if 'tool_calls' in messages[-1].keys():
                return executor
            return team_lead
        if last_speaker is executor:
            return pentest_agent


    groupchat = GroupChat(
        agents=[init_agent, team_lead, pentest_agent, pentest_agent, executor],
        messages=[],
        max_round=20,
        speaker_selection_method=state_transition,
        allow_repeat_speaker=None,
        speaker_transitions_type="allowed"
    )
    manager = GroupChatManager(groupchat=groupchat, llm_config=llm_config_chat_manager)

    init_agent.initiate_chat(
        manager, message="Please scan web-site http://3.255.253.224:4280/"
    )


