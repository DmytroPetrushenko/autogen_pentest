import json
import os
from autogen import config_list_from_json, ConversableAgent, UserProxyAgent, GroupChat, GroupChatManager

from tools.for_group_chat.common_tools import read_from_file, write_to_file
from tools.for_group_chat.msf_tools import msf_console_scan_tool
from utils.groupchat_utils import registration_tools_in_agents


def create_manager_pentest_flow() -> None:

    config_list = config_list_from_json(
        "OAI_CONFIG_LIST",
        file_location=os.getcwd(),
        filter_dict={
            "model": ["gpt-4-turbo-2024-04-09"],
        }
    )


    llm_config_team_lead = {"config_list": config_list, "cache_seed": 42}
    llm_config_pentest = {"config_list": config_list, "cache_seed": 10045}
    llm_config_chat_manager = {"config_list": config_list, "cache_seed": 10000045}

    team_lead = ConversableAgent(
        name="team_lead",
        llm_config=llm_config_team_lead,
        system_message="You are the Team Lead."
                        "GOAL: Your task is to create a website testing plan based on the allowed Metasploit modules "
                        "and adjust the plan according to the obtained results."
                        "STEPS:"
                            "Step 1: Ask for the list of Metasploit modules that the pentest agent can use. Continue "
                                    "to step 2."
                            "Step 2: Get the Metasploit modules list from the pentest agent. Continue to step 3."
                            "Step 3: Create a preliminary pentesting plan for the pentest agent, using only the "
                                    "Metasploit modules list obtained from the pentest agent. Continue to step 4."
                            "Step 4: Create a final pentesting plan for the pentest agent based on the results obtained "
                                    "after executing the preliminary pentesting plan by the pentest agent, using only "
                                    "the Metasploit modules list obtained from the pentest agent. Continue to step 5."
                            "Step 5: Create a security report based on the pentesting scans obtained from the pentest "
                                    "agent. Continue to step 6."
                            "Step 6: Ask Pentest agent to write the security report in a file. Continue to step 7. "
                            "Step 7: After Pentest agent will write the security report in file, thanked him and "
                                    "add 'TERMINATE' at the end of your message."
    )

    pentest_agent = ConversableAgent(
        name="pentest_agent",
        llm_config=llm_config_pentest,
        system_message="You are the Pentest Agent. "
                       "GOAL: Your task is to conduct testing according to the tasks received from the Team Lead. "
                       "Highlights: Metasploit modules is in 'modules.txt'. USE only your tools!"
                       "STEPS: "
                       "Step 1: Receive a task from the Team Lead. Continue to step 2."
                       "Step 2: Execute it. "
    )


    executor = ConversableAgent(
        name="executor_agent",
        llm_config=False,  # Turn off LLM for this agent.
        code_execution_config={
            "work_dir": "coding",
            "use_docker": False
        },
        human_input_mode="NEVER",  # Never take human input for this agent for safety.
    )

    init_agent = UserProxyAgent(
        name="Initializer_agent",
        human_input_mode="NEVER",
    )

    # registration_tools_in_agents(pentest_agent, executor,  "msf_tools")

    pentest_agent.register_for_llm(name=msf_console_scan_tool.__name__, description=msf_console_scan_tool.__doc__)(msf_console_scan_tool)
    executor.register_for_execution(name=msf_console_scan_tool.__name__)(msf_console_scan_tool)

    pentest_agent.register_for_llm(name=read_from_file.__name__, description=read_from_file.__doc__)(read_from_file)
    executor.register_for_execution(name=read_from_file.__name__)(read_from_file)

    pentest_agent.register_for_llm(name=write_to_file.__name__, description=write_to_file.__doc__)(write_to_file)
    executor.register_for_execution(name=write_to_file.__name__)(write_to_file)


    def state_transition(last_speaker, groupchat):
        messages = groupchat.messages
        if last_speaker is init_agent:
            return team_lead
        if last_speaker is team_lead:
            return pentest_agent
        if last_speaker is pentest_agent:
            if 'tool_calls' in messages[-1].keys():
                return executor
            return team_lead
        if last_speaker is executor:
            return team_lead


    groupchat = GroupChat(
        agents=[init_agent, team_lead, pentest_agent, executor],
        messages=[],
        max_round=20,
        speaker_selection_method=state_transition,
        allow_repeat_speaker=None,
        speaker_transitions_type="allowed"

    )
    manager = GroupChatManager(
        groupchat=groupchat,
        llm_config=llm_config_chat_manager,
        is_termination_msg=lambda msg: "TERMINATE" in msg["content"],
        human_input_mode="NEVER"
    )

    init_agent.initiate_chat(
        manager, message="Please scan web-site - 3.249.162.195 : 80"
    )


