import os
import tempfile

from autogen import config_list_from_json, ConversableAgent, AssistantAgent, UserProxyAgent, GroupChat, GroupChatManager

from agents.for_group_chat.reporter_agents import ReporterAgent
from agents.for_group_chat.scanner_agents import NmapScannerAgent
from utils.groupchat_utils import registration_tools_in_agents


def create_a_report_critic_pentest_agents():
    config_list = config_list_from_json(
        "OAI_CONFIG_LIST",
        file_location=os.getcwd(),
        filter_dict={
            "model": ["gpt-4", "gpt-4-0314", "gpt4", "gpt-4-32k", "gpt-4-32k-0314", "gpt-4-32k-v0314",
                      "gpt-4-turbo-2024-04-09"],
        }
    )

    llm_config_critic = {"config_list": config_list, "cache_seed": 42}
    llm_config_project = {"config_list": config_list, "cache_seed": 10045}
    llm_config_reporter = {"config_list": config_list, "cache_seed": 420000045}
    llm_config_manager = {"config_list": config_list, "cache_seed": 10000045}
    llm_config_sub_pentest = {"config_list": config_list, "cache_seed": 1000000045}

    # executor_env = ExecuteInDocker(image="sha256:14c7784c40bdc52ffa8cd3276781bdb45428549c772a1b25a84f28d4d2e31bab",
    #                                container_name="autogen_python_container")
    #
    #
    # executor_agent = ExecutorAgent(code_execution_config={'executor': executor_env})

    # Create a temporary directory to store the code files.
    temp_dir = tempfile.TemporaryDirectory()

    # Create a Docker command line code executor.
    # executor = DockerCommandLineCodeExecutor(
    #     image="sha256:14c7784c40bdc52ffa8cd3276781bdb45428549c772a1b25a84f28d4d2e31bab",  # Execute code using the given docker image name.
    #     timeout=10,  # Timeout for each code execution in seconds.
    #     work_dir=temp_dir.name,  # Use the temporary directory to store the code files.
    # )

    project_manager_agent = ConversableAgent(
        name="project_manager_agent",
        llm_config=llm_config_project,
        system_message="You are the Project Manager Agent. "
                       "GOAL: Manage the workflow by orchestrating the distribution and processing of data for further "
                       "analysis and report preparation. "
                       "COMMUNICATION TEMPLATE: Hi, <agent name>! Please <your task for this agent>"
                       "STEPS: "
                       "Step 1: Read the specified file to extract pre-analyzed scan results. "
                       "Step 2.0: Identify data requiring further detailed scanning. Don't create Security Report Summary"
                       "Step 2.1: Ask the Sub-Pentest Agent to scan them by listing in this message!"
                       "Step 2.2: Get result of Sub-Pentest Agent work from a Executor agent"
                       "Step 3: Ask the Reporter agent to create a security report and send all data - pre-analyzed scan "
                       "results and the result of the Sub-Pentest Agent scanning!"
    )

    sub_pentest_agent = ConversableAgent(
        name="sub_pentest_agent",
        llm_config=llm_config_sub_pentest,
        system_message="You are the Sub-Pentest Agent. "
                       "GOAL: Coordinate the execution of deep-dive vulnerability scans by providing function IDs and data to the Executor Agent. "
                       "STEPS: "
                       "Step 1: Receive data and function IDs for scanning tools from the Project Manager. "
                       "Step 2: Pass the function IDs along with the data to the Executor Agent to initiate the "
                       "scanning process. "
    )

    reporter_agent = ConversableAgent(
        name="reporter_agent",
        llm_config=llm_config_reporter,
        system_message="You are the Reporter Agent. "
                       "GOAL: Create both preliminary and final security reports based on the data and feedback received. "
                       "STEPS: Step 1: Receive initial data from the Project Manager and scanned results from the "
                       "Sub-Pentest Agent. Step 2: Compile a preliminary report and send it to the Critic Agent for "
                       "review. Step 3: Incorporate feedback from the Critic Agent and finalize the report."
    )

    critic_agent = ConversableAgent(
        name="critic_agent",
        llm_config=llm_config_critic,
        system_message="You are the Critic Agent. "
                       "GOAL: Review and provide feedback on the preliminary report to ensure accuracy and "
                       "completeness. "
                       "STEPS: "
                       "Step 1: Review the preliminary report from the Reporter Agent. "
                       "Step 2: Send back detailed feedback and recommendations for any necessary revisions. "
                       "Step 3: Approve the final report once all corrections have been made."
    )

    executor_agent = ConversableAgent(
        name="executor_agent",
        llm_config=False,  # Turn off LLM for this agent.
        code_execution_config={
            "work_dir": "coding",
            "use_docker": False
        },
        human_input_mode="NEVER",  # Never take human input for this agent for safety.
    )

    init_agent = UserProxyAgent(
        name="Initializer_agent",
        human_input_mode="TERMINATE"
    )

    registration_tools_in_agents(project_manager_agent, "register_for_llm", "common_tools")
    registration_tools_in_agents(executor_agent, "register_for_execution", "common_tools")
    registration_tools_in_agents(sub_pentest_agent, "register_for_llm", "pentest_tools")
    registration_tools_in_agents(executor_agent, "register_for_execution", "pentest_tools")

    graph_dict = {
        init_agent: [project_manager_agent],
        project_manager_agent: [executor_agent, reporter_agent, sub_pentest_agent],
        sub_pentest_agent: [executor_agent],
        reporter_agent: [critic_agent],
        critic_agent: [reporter_agent],
        executor_agent: [project_manager_agent],
    }

    def state_transition(last_speaker, groupchat):
        messages = groupchat.messages
        if last_speaker is init_agent:
            return project_manager_agent
        elif last_speaker is project_manager_agent:
            if 'tool_calls' in messages[-1].keys():
                return executor_agent
            if 'Sub-Pentest Agent' in messages[-1]['content']:
                return sub_pentest_agent
            if 'Reporter agent' in messages[-1]['content']:
                return reporter_agent
        elif last_speaker is executor_agent:
            return project_manager_agent
        elif last_speaker is sub_pentest_agent:
            if 'tool_calls' in messages[-1].keys():
                return executor_agent
        elif last_speaker is reporter_agent:
            if messages[-2]['name'] == "project_manager_agent":
                return critic_agent
            if messages[-2]['name'] == "critic_agent":
                messages[-1]['content'] += ' TERMINATE'
                return init_agent
        elif last_speaker is critic_agent:
            return reporter_agent

    groupchat = GroupChat(
        agents=[init_agent, project_manager_agent, critic_agent, executor_agent, reporter_agent, sub_pentest_agent],
        messages=[],
        max_round=20,
        speaker_selection_method=state_transition,
        allow_repeat_speaker=None,
        speaker_transitions_type="allowed"
    )
    manager = GroupChatManager(groupchat=groupchat, llm_config=llm_config_manager)

    init_agent.initiate_chat(
        manager, message="Create a security report based on the scanning results located in the file "
                         "'resources/scan_results/result_nmap_scan_2024-04-15_16-29-52.txt'. Analyze the scan data to "
                         "identify potential security vulnerabilities and summarize your findings in a detailed report. "
                         "Ensure that the report is structured and adheres to OWASP standards, incorporating all relevant "
                         "information extracted from the scan results."
    )
