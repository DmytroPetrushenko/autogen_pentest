import os

from autogen import ConversableAgent, UserProxyAgent, GroupChat, GroupChatManager, config_list_from_json

from tools.for_group_chat.pentest_tools import nmap_scanner_tcp, nmap_scanner_ping, nmap_scanner_syn, nmap_scanner_idle, \
    nmap_scanner_fin, nmap_disable_dns, nmap_arp_discovery, nmap_no_portscan
from utils.groupchat_utils import registration_tools_in_agents


def launch_pentest_agent_mistral():
    mistral_config_list = [
        {
            # Choose your model name.
            "model": "mistral-large-latest",
            "base_url": "https://api.mistral.ai/v1",
            # You need to provide your API key here.
            "api_key": "4QPuGhlipUPdFWj9RupapHaYnIwyTp5q",
        }
    ]


    llm_config_pentest = {"config_list": mistral_config_list, "cache_seed": 42}


    pentest_agent = ConversableAgent(
        name="pentest_agent",
        system_message="You are a helpful Pentest Assistant."
                       "step 1.0 Make a preliminary scan using only the tools you have;"
                       "step 1.1 Wait for a result from executor_agent; "
                       "step 2. Analyse the results and make a plan based on the scan with your tools;"
                       "step 3.0 Perform the scan according to the plan by sending a tool with investigating data (a host); "
                       "step 3.1 repeat step 3.0 until all items of the plan will be finished according the plan"
                       "step 4. Report back after the plan is complete.",
        llm_config=llm_config_pentest
        )

    executor_agent = ConversableAgent(
        name="executor_agent",
        llm_config=False,  # Turn off LLM for this agent.
        code_execution_config={
            "work_dir": "coding",
            "use_docker": False
        },
        human_input_mode="TERMINATE",  # Never take human input for this agent for safety.
    )

    init_agent = UserProxyAgent(
        name="init_agent",
        code_execution_config=False,
        human_input_mode="TERMINATE"
    )

    # registration_tools_in_agents(pentest_agent, executor_agent, "pentest_tools")

    pentest_agent.register_for_llm(name=nmap_scanner_tcp.__name__, description=nmap_scanner_tcp.__doc__)(nmap_scanner_tcp)
    pentest_agent.register_for_llm(name=nmap_scanner_ping.__name__, description=nmap_scanner_ping.__doc__)(nmap_scanner_ping)
    pentest_agent.register_for_llm(name=nmap_scanner_idle.__name__, description=nmap_scanner_idle.__doc__)(nmap_scanner_idle)
    pentest_agent.register_for_llm(name=nmap_scanner_fin.__name__, description=nmap_scanner_fin.__doc__)(nmap_scanner_fin)
    pentest_agent.register_for_llm(name=nmap_scanner_syn.__name__, description=nmap_scanner_syn.__doc__)(nmap_scanner_syn)
    pentest_agent.register_for_llm(name=nmap_disable_dns.__name__, description=nmap_disable_dns.__doc__)(nmap_disable_dns)
    pentest_agent.register_for_llm(name=nmap_arp_discovery.__name__, description=nmap_arp_discovery.__doc__)(nmap_arp_discovery)
    pentest_agent.register_for_llm(name=nmap_no_portscan.__name__, description=nmap_no_portscan.__doc__)(nmap_no_portscan)

    executor_agent.register_for_execution(name=nmap_scanner_tcp.__name__)(nmap_scanner_tcp)
    executor_agent.register_for_execution(name=nmap_scanner_ping.__name__)(nmap_scanner_ping)
    executor_agent.register_for_execution(name=nmap_scanner_syn.__name__)(nmap_scanner_syn)
    executor_agent.register_for_execution(name=nmap_scanner_idle.__name__)(nmap_scanner_idle)
    executor_agent.register_for_execution(name=nmap_scanner_fin.__name__)(nmap_scanner_fin)
    executor_agent.register_for_execution(name=nmap_disable_dns.__name__)(nmap_disable_dns)
    executor_agent.register_for_execution(name=nmap_arp_discovery.__name__)(nmap_arp_discovery)
    executor_agent.register_for_execution(name=nmap_no_portscan.__name__)(nmap_no_portscan)

    executor_agent.initiate_chat(
        pentest_agent,
        message="Please scan the host -> miloslavsky.info",
        max_turns=10
    )

