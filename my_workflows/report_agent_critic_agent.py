import os

import autogen
from autogen import AssistantAgent

from agents.for_group_chat.executor_agents import ExecutorAgent, ExecuteInDocker
from agents.for_group_chat.reporter_agents import ReporterAgent
from agents.for_group_chat.scanner_agents import NmapScannerAgent
from utils.groupchat_utils import registration_tools_in_agents

config_list = autogen.config_list_from_json(
    "../OAI_CONFIG_LIST",
    file_location=os.getcwd(),
    filter_dict={
        "model": ["gpt-4", "gpt-4-0314", "gpt4", "gpt-4-32k", "gpt-4-32k-0314", "gpt-4-32k-v0314",
                  "gpt-4-turbo-2024-04-09"],
    }
)

llm_config_critic = {"config_list": config_list, "cache_seed": 42}
llm_config_reporter = {"config_list": config_list, "cache_seed": 10045}
llm_config_manager = {"config_list": config_list, "cache_seed": 10000045}


executor_env = ExecuteInDocker(image="nmap_python_image:latest",
                               container_name="autogen_python_container")
executor_agent = ExecutorAgent(code_execution_config={'executor': executor_env})

critic_agent = AssistantAgent(
    name="critic_agent",
    llm_config=llm_config_critic,
    system_message="You are a Critic Agent. "
                   "YOUR GOAL: Check a security report received from the Reporter Agent. "
                   "Instructions: "
                   "Step 1: Receive a report from the Reporter Agent. "
                   "Step 2: Analyze it and identify any mistakes. "
                   "Step 3: Send recommendations for fixing the report to the Reporter Agent."
)


reporter_agent = ReporterAgent(
    llm_config=llm_config_reporter,
    system_message="You are a Reporter Agent. "
                   "YOUR GOAL: Generate a security report based on the obtained scan results, "
                   "following OWASP standards. "
                   "Instructions: "
                   "Step 1: Obtain results from a file specified by 'file_path', which is generated by tools named 'tool_name' from Metasploit. "
                   "Step 2: Analyze the scan results using your expertise and tools, in alignment with OWASP standards. "
                   "Step 3: Send the initial report to the Critic Agent for review. "
                   "Step 4: Receive fixing instructions from the Critic Agent, analyze them, and revise the report accordingly. "
                   "Step 5: Write the finalized security report to a file using the 'writer_to_file' tool and 'executor_agent'."
)

init_agent = autogen.UserProxyAgent(
    name="Initializer_agent",
    human_input_mode="TERMINATE"
)

registration_tools_in_agents(critic_agent, "register_for_llm", "common_tools")
registration_tools_in_agents(reporter_agent, "register_for_llm", "common_tools")
registration_tools_in_agents(executor_agent, "register_for_execution", "common_tools")


graph_dict = {
    init_agent: [reporter_agent],
    reporter_agent: [executor_agent, critic_agent],
    critic_agent: [executor_agent, reporter_agent],
    executor_agent: [critic_agent, reporter_agent]
}


groupchat = autogen.GroupChat(
    agents=[init_agent, critic_agent, executor_agent, reporter_agent],
    messages=[],
    max_round=3,
    speaker_selection_method="auto",
    allowed_or_disallowed_speaker_transitions=graph_dict,
    allow_repeat_speaker=None,
    speaker_transitions_type="allowed"
)
manager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config_manager)

init_agent.initiate_chat(
    manager, message="Create a security report based on the scanning results located in the file "
                     "'resources/scan_results/result_nmap_scan_2024-04-15_16-29-52.txt'. Analyze the scan data to "
                     "identify potential security vulnerabilities and summarize your findings in a detailed report. "
                     "Ensure that the report is structured and adheres to OWASP standards, incorporating all relevant "
                     "information extracted from the scan results."
)
