import os

import autogen
from autogen import AssistantAgent

from agents.for_group_chat.executor_agents import ExecutorAgent, ExecuteInDocker
from agents.for_group_chat.reporter_agents import ReporterAgent
from agents.for_group_chat.scanner_agents import NmapScannerAgent
from utils.groupchat_utils import registration_tools_in_agents


def create_a_report_critic_agent():

    config_list = autogen.config_list_from_json(
        "OAI_CONFIG_LIST",
        file_location=os.getcwd(),
        filter_dict={
            "model": ["gpt-4", "gpt-4-0314", "gpt4", "gpt-4-32k", "gpt-4-32k-0314", "gpt-4-32k-v0314",
                      "gpt-4-turbo-2024-04-09"],
        }
    )

    llm_config_critic = {"config_list": config_list, "cache_seed": 42}
    llm_config_reporter = {"config_list": config_list, "cache_seed": 10045}
    llm_config_manager = {"config_list": config_list, "cache_seed": 10000045}


    executor_env = ExecuteInDocker(image="nmap_python_image:latest",
                                   container_name="autogen_python_container")
    executor_agent = ExecutorAgent(code_execution_config={'executor': executor_env})

    critic_agent = AssistantAgent(
        name="critic_agent",
        llm_config=llm_config_critic,
        system_message="You are a Critic Agent. "
                       "YOUR GOAL: Review and critique a security report received from the Reporter Agent, ensuring it adheres to OWASP standards and is free of errors. "
                       "Instructions: "
                       "Step 1: Receive the report from the Reporter Agent. "
                       "Step 2: Analyze the report to identify any factual inaccuracies, missed vulnerabilities, formatting issues, or deviations from OWASP standards. "
                       "Step 3: Send detailed recommendations for correcting the report to the Reporter Agent through a designated communication channel. "
                       "Step 4: Confirm that the revised report addresses all initial concerns before final approval."
    )

    reporter_agent = ReporterAgent(
        llm_config=llm_config_reporter,
        system_message="You are a Reporter Agent. "
                       "YOUR GOAL: Prepare a security report based on pre-analyzed scan results and ensure it meets OWASP standards. "
                       "Instructions: "
                       "Step 1: Read results from the specified file path. Ensure the file path is clearly communicated by the system before starting. The file will contain pre-analyzed scan results. "
                       "Step 2: Compile the initial report based on these results, ensuring it aligns with OWASP standards. Document all findings thoroughly. "
                       "Step 3: Send the initial report to the Critic Agent for review. "
                       "Step 4: Receive feedback and detailed fixing instructions from the Critic Agent. Carefully analyze this feedback and incorporate the necessary changes into the report. "
                       "Step 5: Verify that all modifications meet the Critic Agent's recommendations. Once verified, finalize the report. "
                       "Step 6: Use the 'writer_to_file' tool and 'executor_agent' to write the finalized report to a file. This step ensures the report is stored securely and is only executed after all Critic Agent recommendations have been implemented."
    )

    init_agent = autogen.UserProxyAgent(
        name="Initializer_agent",
        human_input_mode="TERMINATE"
    )

    registration_tools_in_agents(reporter_agent, "register_for_llm", "common_tools")
    registration_tools_in_agents(executor_agent, "register_for_execution", "common_tools")


    graph_dict = {
        init_agent: [reporter_agent],
        reporter_agent: [executor_agent, critic_agent],
        critic_agent: [reporter_agent],
        executor_agent: [reporter_agent]
    }


    groupchat = autogen.GroupChat(
        agents=[init_agent, critic_agent, executor_agent, reporter_agent],
        messages=[],
        max_round=20,
        speaker_selection_method="auto",
        allowed_or_disallowed_speaker_transitions=graph_dict,
        allow_repeat_speaker=None,
        speaker_transitions_type="allowed"
    )
    manager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config_manager)

    init_agent.initiate_chat(
        manager, message="Create a security report based on the scanning results located in the file "
                         "'resources/scan_results/result_nmap_scan_2024-04-15_16-29-52.txt'. Analyze the scan data to "
                         "identify potential security vulnerabilities and summarize your findings in a detailed report. "
                         "Ensure that the report is structured and adheres to OWASP standards, incorporating all relevant "
                         "information extracted from the scan results."
    )
