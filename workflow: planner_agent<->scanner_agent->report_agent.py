import autogen
import os

from agents.for_group_chat.executor_agents import ExecutorAgent, ExecuteInDocker
from agents.for_group_chat.planner_agents import PlannerAgent
from agents.for_group_chat.reporter_agents import ReporterAgent
from agents.for_group_chat.scanner_agents import NmapScannerAgent
from utils.groupchat_utils import registration_tools_in_agents

config_list = autogen.config_list_from_json(
    "OAI_CONFIG_LIST",
    file_location=os.getcwd(),
    filter_dict={
        "model": ["gpt-4", "gpt-4-0314", "gpt4", "gpt-4-32k", "gpt-4-32k-0314", "gpt-4-32k-v0314",
                  "gpt-4-turbo-2024-04-09"],
    }
)

llm_config_scanner = {"config_list": config_list, "cache_seed": 42}
llm_config_reporter = {"config_list": config_list, "cache_seed": 10045}
llm_config_planner = {"config_list": config_list, "cache_seed": 100000045}
llm_config_manager = {"config_list": config_list, "cache_seed": 10000045}


executor_env = ExecuteInDocker(image="nmap_python_image:latest",
                               container_name="autogen_python_container")
executor_agent = ExecutorAgent(code_execution_config={'executor': executor_env})

planner_agent = PlannerAgent(
    llm_config=llm_config_planner,
    system_message="You are the Planner Agent. "
                   
                   "GOAL: Create a pentest plan based on network scan."
                   "Step 1.0: Ask agent pentest tool by this message: 'What pentools do we have?' "
                   "Step 1.1: Get a pentest tool list"
                   "Step 1.2: Classified your tools from this list"
                   "Step 2: Create a plan using only docstring your tools"
                   "Step 3 (Repeat this step in the loop until all items of the plan are completed): "
                   "Send one current item to scanner_agent by message 'Begin executing the plan:<your current item>'"



                   # "tools. You are tasked with dispatching tasks one by one to the scanner_agent for execution and "
                   # "receiving the results back. Analyze the outcomes and, based on this analysis, generate new input "
                   # "data to refine and improve the plan. Continue this iterative process until the plan is complete. "
                   # "Finally, send all the results to the report_agent."
)

scanner_agent = NmapScannerAgent(
    llm_config=llm_config_scanner,
    system_message="You are an Nmap Scan Agent."
                   "YOUR GOAL: Scan hosts using Nmap tools from the list provided"
                   "Instructions:"
                   "Step 0.0: Send only function name for Planner_agent request about tools by message as: "
                   "'Here is the list of Nmap tools that I can use for scanning: <your list>'"
                   "Step 1.0: Get a task -> <function name> and <target> from Planner_agent."
                   "Step 1.2: Select the most suitable <function> by <function name> from your tools list." 
                   "Step 2: execute <function> and <target> executor_agent."
)

# nmap_scanner_agent = NmapScannerAgent(
#     llm_config=llm_config_scanner,
#     name="Mock_nap_scanner_agent",
#     description="Simulate perform a network scan on a host using nmap_scanner_mock.",
#     system_message="You are Mock Nmap Scan Agent."
#                    "YOUR GOAL: Simulate scanning hosts using Nmap tools from the list provided"
#                    "Instructions:"
#                    "Step 1: Get a task from Initializer_agent."
#                    "Step 1.1: write what tools you chose and why!"
#                    "Step 2: Use tool -> 'nmap_scanner_mock' from your tools and executor_agent."
#                    "Step 3: Send result to Reporter_agent."
# )

reporter_agent = ReporterAgent(
    llm_config=llm_config_reporter,
    system_message="You are a Reporter Agent."
                   "YOUR GOAL: Generate a security report based on the obtained scan results, "
                   "following OWASP standards."
                   "Instructions:"
                   "Step 1: Receive scan results from Nmap_scanner_agent."
                   "Step 2: Analyze the scan results using your expertise and tools in alignment with OWASP standards."
                   "Step 3: Compile and write the security report to a file using the writer_to_file tool and executor_"
                   "agent."
)

initializer_agent = autogen.UserProxyAgent(
    name="Initializer_agent",
    human_input_mode="TERMINATE"
)

registration_tools_in_agents(scanner_agent, "register_for_llm", "pentest_tools")
# registration_tools_in_agents(planner_agent, "register_for_llm", "pentest_tools")
registration_tools_in_agents(reporter_agent, "register_for_llm", "common_tools")
registration_tools_in_agents(executor_agent, "register_for_execution", "pentest_tools")
registration_tools_in_agents(executor_agent, "register_for_execution", "common_tools")


def state_transition(last_speaker, groupchat):
    messages = groupchat.messages

    if last_speaker is initializer_agent:
        # start a workflow, initializer_agent -> planner_agent
        return planner_agent
    elif last_speaker is planner_agent:
        if messages[-1]["content"] == "What pentools do we have?":
            return scanner_agent
        elif messages[-1]["content"] == "Planner agent creat report!":
            return planner_agent
        elif "Begin executing the plan" in messages[-1]["content"]:
            return scanner_agent
    elif last_speaker is scanner_agent:
        if 'Here is the list of Nmap tools that I can use for scanning:' in messages[-1]["content"]:
            return planner_agent
        return executor_agent
    elif last_speaker is executor_agent:
        return planner_agent
    else:
        return None


groupchat = autogen.GroupChat(
    agents=[initializer_agent, planner_agent, scanner_agent,  executor_agent],  # , scanner_agent, reporter_agent
    messages=[],
    max_round=20,
    speaker_selection_method=state_transition,
)
manager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config_manager)

initializer_agent.initiate_chat(
    manager, message="create a plan and scan - >63.251.228.0/24"
)
