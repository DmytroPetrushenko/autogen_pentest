import os

import autogen
from agents.code_executor_agent import DockerCodeExecutor
from tools.tools_for_group_chat.nmap_tool_group import nmap_scanner
from tools.tools_for_group_chat.write_to_file_group import write_to_file

config_list = autogen.config_list_from_json(
    "OAI_CONFIG_LIST",
    file_location=os.getcwd(),
    filter_dict={
        "model": ["gpt-4", "gpt-4-0314", "gpt4", "gpt-4-32k", "gpt-4-32k-0314", "gpt-4-32k-v0314"],
    },
)

llm_config_scanner = {"config_list": config_list, "cache_seed": 42}
llm_config_manager = {"config_list": config_list, "cache_seed": 42}
llm_config_reporter = {"config_list": config_list, "cache_seed": 42}

executor = DockerCodeExecutor().get_executor()

user_proxy = autogen.UserProxyAgent(
    name="User_proxy",
    system_message="A human admin.",
    code_execution_config={
        "executor": executor
    },  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than
    # running the generated code directly.
    human_input_mode="TERMINATE",
)
scaner_agent = autogen.AssistantAgent(
    name="scaner_agent",
    llm_config=llm_config_scanner,
    system_message="You are Scan network agent!"
                   "Goals: "
                   "1) Scan received ip address by nmap tool!"
                   "2) Send result to reporting_agent!"
)
reporting_agent = autogen.AssistantAgent(
    name="reporting_agent",
    system_message="You are Reporting agent "
                   "Goals: "
                   "1) Create a security report after you have received a result from scaner_agent."
                   "2) Write the security report in a file by write_to_file_tool"
                   "3) Sent 'TERMINATE' to User_proxy",
    llm_config=llm_config_reporter,
)


# Register the tools signature with the agents
scaner_agent.register_for_llm(name="nmap_tool",
                              description="This function is used to scan the network using nmap app")(nmap_scanner)
reporting_agent.register_for_llm(name="write_to_file_tool",
                                 description="Writes given data to a file, converting non-string data to "
                                             "strings as necessary")(write_to_file)

# Register the tool functions with the user proxy agent.
user_proxy.register_for_execution()(nmap_scanner)
user_proxy.register_for_execution()(write_to_file)

group_chat = autogen.GroupChat(agents=[user_proxy, scaner_agent, reporting_agent], messages=[], max_round=12)
manager = autogen.GroupChatManager(groupchat=group_chat, llm_config=llm_config_manager)

user_proxy.initiate_chat(
    manager, message="scan  127.0.0.1, "
                     "ports: 80, 443, 21, 22, 25, 110, 143, 993, 995, 3306, 3389, 5900, 8080"
)
# type exit to terminate the chat
