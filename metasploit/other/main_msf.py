import time
from sqlite3 import DatabaseError

import utils.os_utils
from metasploit.other.metasploit_job import MetasploitJob
import dao.sqlite.msf_sqlite as db_sqlite

TABLE_NAME = f'msf_pentest_v1' # {datetime.datetime.now().strftime("%Y-%m-%d_%H:%M")}'

def start_metasploit(table_name=TABLE_NAME, template = 'scanner/http'):
    hosts: list[str] = utils.os_utils.read_file_to_list(file_name='resources/hosts.txt')
    modules: list[str] = utils.os_utils.read_file_to_list(file_name='resources/modules.txt')


    # template = 'scanner/http'
    module = [module for module in modules if template in module][0]

    metasploit_job = MetasploitJob()
    db_connection = metasploit_job.get_db_connection()

    db_bool = db_sqlite.create_table(db_connection, table_name)

    if not db_bool:
        raise DatabaseError(f'Failed to create table {table_name}')

    for host in hosts:
        http_scan_json = {
            'host':host,
            'type':'auxiliary',
            'module': module,
        }
        result_launching_job = metasploit_job.create_job(db_connection, table_name, http_scan_json)
        print(result_launching_job)

    metasploit_job.close_db_connection() # close db connect

def check_metasploit(table_name=TABLE_NAME, time_sleep=10):
    metasploit_job = MetasploitJob()
    db_connection = metasploit_job.get_db_connection()

    while True:
        result_dict = metasploit_job.check_jobs(db_connection, table_name)

        if result_dict['running'] == 0:
            print(f"All jobs finished - {result_dict['completed']}")
            break
        print(result_dict['message'])
        time.sleep(time_sleep)
    metasploit_job.close_db_connection()

def get_results(table_name=TABLE_NAME) -> list[str]:
    final_result: list[str] = []
    metasploit_job = MetasploitJob()
    try:
        results_list = metasploit_job.get_results(table_name)
        for result_dict in results_list:
            final_result.append(f"host: {result_dict['host']}, module: {result_dict['module']}, result:{result_dict['result']}.")
        return final_result
    finally:
        metasploit_job.close_db_connection()

