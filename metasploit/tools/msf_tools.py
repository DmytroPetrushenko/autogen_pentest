import time

from pymetasploit3.msfrpc import MsfRpcClient

from utils.custom_decorators import pentest_tools


class MsfClient:
    _instance = None

    def __new__(cls, *args, **kwargs):
        if cls._instance is None:
            cls._instance = super(MsfClient, cls).__new__(cls)
            cls._instance.client = MsfRpcClient(password='Rn4klU6y', host='127.0.0.1', port=55552, ssl=True)
        return cls._instance

    def get_client(self):
        return self.client


@pentest_tools
def msf_scan_tool(module_category: str, module_name: str, rhosts: str, rport: str):
    """
    Execute a scan using a specified Metasploit module.
    Recommended module can be found here: auxiliary/scanner/http/http_version, auxiliary/scanner/http/dir_scanner,
    auxiliary/scanner/http/robots_txt, auxiliary/scanner/http/login, auxiliary/scanner/http/csrf,
    auxiliary/scanner/http/sql_injection, auxiliary/scanner/http/command_injection.

    Args:
        module_category (str): The category of the module (e.g., 'auxiliary', 'exploit').
        module_name (str): The name of the module (e.g., 'scanner/http/crawler').
        rhosts (str): The target hosts to scan.
        rport (str): The target port to scan.

    Returns:
        dict: Results of the scan.

    Raises:
        Exception: If an error occurs during the scan execution.
    """
    client = MsfClient().get_client()

    active_module = client.modules.use(module_category, module_name)

    active_module['RHOSTS'] = rhosts
    active_module['RPORT'] = rport


    job_info: dict = active_module.execute()
    if 'uuid' in job_info.keys():
        uuid: str = job_info['uuid']
    else:
        raise Exception(f'No uuid found for module {module_category}/{module_name} - {rhosts}:{rport}{uri}')

    while True:
            info: dict = client.jobs.info_by_uuid(uuid)
            if 'error' in info and info['error']:
                print(f"Error happened: {info['error']}")
                print(f"Error class: {info['error_class']}")
                print(f"Error message: {info['error_string']}")
                print("Error backtrace:")
                for line in info['error_backtrace']:
                    print(f"  {line}")
                raise Exception(f"Scan failed with error: {info['error_message']}")
            if 'status' in info.keys():
                if info['status'] == 'completed':
                    return client.modules.results(uuid)
            time.sleep(60)

# Пример использования
module_category = 'auxiliary'
module_name = 'scanner/http/crawler'
rhosts = '3.255.212.92'
rport = '4280'


try:
    results = msf_scan_tool(module_category, module_name, rhosts, rport)
    print("Scan results:", results)
except Exception as e:
    print(f"An error occurred: {e}")