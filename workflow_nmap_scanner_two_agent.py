from autogen import ConversableAgent, register_function

from agents.code_executor_agent import DockerCodeExecutor
from llm.lm_studio import start_llm_in_studio
from llm.open_ai import start_llm_openai
from tools.nmap_tool import nmap_scanner
from tools.write_to_file import write_to_file



# Let's first define the assistant agent that suggests tool calls.
assistant = ConversableAgent(
    name="Assistant",
    system_message="You are a helpful AI assistant. "
    "You can help with simple ip scan with you tool - nmap_scanner and write_to_file. "
    "Highlights - You can ask 'UserProxy' to execute a code from the tools."
    "Under the restrictions that "
                   "1) you must obligatory use solutions based on your tools.",
    llm_config=start_llm_in_studio(
        model_api="TheBloke/Mixtral-8x7B-Instruct-v0.1-GGUF/mixtral-8x7b-instruct-v0.1.Q2_K.gguf",
        base_url="http://localhost:1234/v1"
    )
)

# The user proxy agent is used for interacting with the assistant agent
# and executes tool calls.
executor_container = DockerCodeExecutor()
executor = executor_container.get_executor()

user_proxy = ConversableAgent(
    name="UserProxy. You are my helper, you should take a decision which "
         "agent can do my task and you have code executor agent",
    llm_config={"config_list": [start_llm_openai()]},
    code_execution_config={"executor": executor},
    is_termination_msg=lambda msg: msg.get("content") is not None and "TERMINATE" in msg["content"],
    human_input_mode="NEVER",
)

# Register the tool signature with the assistant agent.
assistant.register_for_llm(name="nmap_scanner", description="A simple nmap scanner")(nmap_scanner)
assistant.register_for_llm(name="write_to_file",
                           description="This function can write a string to a file")(write_to_file)

# Register the tool function with the user proxy agent.
user_proxy.register_for_execution(name="nmap_scanner")(nmap_scanner)
user_proxy.register_for_execution(name="write_to_file")(write_to_file)

# # Register the calculator function .
# register_function(
#     calculator,
#     caller=assistant,  # The assistant agent can suggest calls to the calculator.
#     executor=user_proxy,  # The user proxy agent can execute the calculator calls.
#     name="calculator",  # By default, the function name is used as the tool name.
#     description="A simple calculator",  # A description of the tool.
# )

chat_result = user_proxy.initiate_chat(
    assistant,
    message="scan 63.251.228.0 only these ports: 0-10 and use nmap_scanner for it and write in file!",
    max_turns=3
)
