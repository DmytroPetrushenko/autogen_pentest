import datetime
import json
import os
from typing import Any

from utils.custom_decorators import other_tools
from utils.os_utils import get_var_from_config

CONFIG_FILE_NAME = 'config.ini'
PROJECT_VAR_NAME = 'PROJECT_VAR_NAME'
NMAP_SCAN_RESULT_DIR = 'nmap_scan_result_dir'


@other_tools
def write_to_file(data: Any, filename: str = 'result.md') -> str:
    """
    Goals: Writes given data to a file, converting non-string data to strings as necessary.

    Parameters:
    - data: The data to write to the file. Can be of any type (str, int, float, list, dict, bool).
    - filename (str): The base name of the file to which data will be written. A timestamp will be
                      appended to this base name. Defaults to 'result.txt'.

    Returns:
    - bool: True if the file was written successfully, False otherwise.

    Raises:
    - Exception: Propagates any exceptions that occur during file writing or data serialization.
    """
    try:
        # Convert non-string data to a string format
        if not isinstance(data, str):
            # For dictionaries and lists, use JSON serialization
            if isinstance(data, (dict, list)):
                data = json.dumps(data, indent=4)
            else:
                # For other data types, use the str() function
                data = str(data)

        # Locate Nmap scan results directory using the configuration file name.

        # Build the full path to the result's directory.
        result_folder_path = f"{os.getcwd()}/{get_var_from_config(PROJECT_VAR_NAME, NMAP_SCAN_RESULT_DIR)}"

        # Create the directory if it does not exist.
        if not os.path.exists(result_folder_path):
            os.makedirs(result_folder_path)

        # Modify the filename to include a timestamp
        basename, extension = os.path.splitext(filename)
        timestamped_filename = (f"{result_folder_path}/{basename}_"
                                f"{datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}{extension}")

        # Saving the data to a file
        with open(timestamped_filename, 'w') as file:
            file.write(data)

        print(f"Results saved to {timestamped_filename}")
        return "written in file"
    except Exception as e:
        raise IOError(f"Writing to file failed: {e}")
