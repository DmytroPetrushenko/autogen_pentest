import nmap3
import yaml

from utils.custom_decorators import pentest_tools


# @pentest_tools
# def nmap_scanner_mock(host: str) -> str:
#     """
#     Purpose: Simulates a Nmap scan operation and returns a mock result.
#     This function is intended for testing or development purposes when an actual scan is not necessary or desirable.
#
#     :return (str): A mock (predefined) result of a scan operation.
#     """
#
#     return RESULT


def remove_empty_elements(data):
    """
    Recursively remove empty lists, dictionaries, None elements, or empty strings from a dictionary.

    Args:
        data (dict or list): The dictionary or list from which to remove empty elements.

    Returns:
        dict or list: The cleaned dictionary or list with empty elements removed.
    """
    if isinstance(data, dict):
        return {k: remove_empty_elements(v) for k, v in data.items() if v or v == 0}
    elif isinstance(data, list):
        return [remove_empty_elements(v) for v in data if v or v == 0]
    else:
        return data


@pentest_tools
def nmap_scanner_tcp(host: str, ports: str = None) -> str:
    """
    Performs a basic TCP connection scan and returns the results in YAML format.

    Args:
        host: Target IP or hostname.
        ports: A comma-separated list of ports to scan.

    Returns:
        str: Scan results in YAML string format.
    """
    if ports is not None:
        ports = f" -p {ports}"

    nmap_scan_techniques = nmap3.NmapScanTechniques()
    result = nmap_scan_techniques.nmap_tcp_scan(target=host, args=ports)
    cleaned_result = remove_empty_elements(result)
    yaml_string = yaml.dump(cleaned_result, allow_unicode=True, default_flow_style=False)
    return yaml_string


@pentest_tools
def nmap_scanner_idle(host: str, ports: str = None) -> str:
    """
    Uses a stealthy Idle scan for anonymity and returns the results in YAML format.

    Args:
        host: Target IP or hostname.
        ports: A comma-separated list of ports to scan.

    Returns:
        str: Scan results in YAML string format.
    """
    if ports is not None:
        ports = f" -p {ports}"

    nmap_scan_techniques = nmap3.NmapScanTechniques()
    result = nmap_scan_techniques.nmap_idle_scan(target=host, args=ports)
    cleaned_result = remove_empty_elements(result)
    yaml_string = yaml.dump(cleaned_result, allow_unicode=True, default_flow_style=False)
    return yaml_string


@pentest_tools
def nmap_scanner_fin(host: str, ports: str = None) -> str:
    """
    Executes a FIN scan to bypass filters and returns the results in YAML format.

    Args:
        host: Target IP or hostname.
        ports: A comma-separated list of ports to scan.

    Returns:
        str: Scan results in YAML string format.
    """

    if ports is not None:
        ports = f" -p {ports}"

    nmap_scan_techniques = nmap3.NmapScanTechniques()
    result = nmap_scan_techniques.nmap_fin_scan(target=host, args=ports)
    cleaned_result = remove_empty_elements(result)
    yaml_string = yaml.dump(cleaned_result, allow_unicode=True, default_flow_style=False)
    return yaml_string


@pentest_tools
def nmap_scanner_ping(host: str, ports:str = None) -> str:
    """
    Quickly checks if hosts are online and returns the results in YAML format.

    Args:
        host: Target IP or hostname.

    Returns:
        str: Scan results in YAML string format.
    """

    if ports is not None:
        ports = f" -p {ports}"

    nmap_scan_techniques = nmap3.NmapScanTechniques()
    result = nmap_scan_techniques.nmap_ping_scan(target=host, args=ports)
    cleaned_result = remove_empty_elements(result)
    yaml_string = yaml.dump(cleaned_result, allow_unicode=True, default_flow_style=False)
    return yaml_string


@pentest_tools
def nmap_scanner_syn(host: str, ports: str = None) -> str:
    """
    Purpose: Performs a less intrusive SYN scan.
    :param host: Target IP or hostname.
    :return: Scan results in YAML string format.
    """

    if ports is not None:
        ports = f" -p {ports}"

    nmap_scan_techniques = nmap3.NmapScanTechniques()
    result = nmap_scan_techniques.nmap_syn_scan(target=host, args=ports)
    cleaned_result = remove_empty_elements(result)
    yaml_string = yaml.dump(cleaned_result, allow_unicode=True, default_flow_style=False)
    return yaml_string


@pentest_tools
def nmap_disable_dns(host: str, ports: str = None) -> str:
    """
    Purpose: Disables DNS resolution during the scan.
    :param host: Target IP or hostname.
    :return: Scan results in YAML string format.
    """

    if ports is not None:
        ports = f" -p {ports}"

    nmap_host_discovery = nmap3.NmapHostDiscovery()
    result = nmap_host_discovery.nmap_disable_dns(target=host, args=ports)
    cleaned_result = remove_empty_elements(result)
    yaml_string = yaml.dump(cleaned_result, allow_unicode=True, default_flow_style=False)
    return yaml_string

@pentest_tools
def nmap_arp_discovery(host: str, ports: str = None) -> str:
    """
    Purpose: Performs ARP discovery on the local network.
    :param host: Target IP or hostname. Can also be a range of IPs.
    :return: Scan results in YAML string format.
    """

    if ports is not None:
        ports = f" -p {ports}"

    nmap_host_discovery = nmap3.NmapHostDiscovery()
    result = nmap_host_discovery.nmap_arp_discovery(target=host, args=ports)
    cleaned_result = remove_empty_elements(result)
    yaml_string = yaml.dump(cleaned_result, allow_unicode=True, default_flow_style=False)
    return yaml_string


@pentest_tools
def nmap_no_portscan(host: str, ports: str = None) -> str:
    """
    Purpose: Executes host discovery without port scanning.
    :param host: Target IP or hostname.
    :return: Scan results in YAML string format.
    """

    if ports is not None:
        ports = f" -p {ports}"

    nmap_host_discovery = nmap3.NmapHostDiscovery()
    result = nmap_host_discovery.nmap_no_portscan(target=host, args=ports)
    cleaned_result = remove_empty_elements(result)
    yaml_string = yaml.dump(cleaned_result, allow_unicode=True, default_flow_style=False)
    return yaml_string
