import re
import time

from datetime import datetime
from pymetasploit3.msfrpc import MsfRpcClient

from dao.sqlite.msf_sqlite import create_connection, create_table, insert_data
from utils.custom_decorators import pentest_tools
from utils.os_utils import read_file_to_list

KEYWORDS = ['execution completed', 'OptionValidateError']
TIMEOUT = 60


class MsfClient:
    _instance = None

    def __new__(cls, *args, **kwargs):
        if cls._instance is None:
            cls._instance = super(MsfClient, cls).__new__(cls)
            cls._instance.client = MsfRpcClient(password='Rn4klU6y', host='127.0.0.1', port=55552, ssl=True)
        return cls._instance

    def get_client(self):
        return self.client


@pentest_tools
def msf_scan_tool(module_category: str, module_name: str, rhosts: str, rport: str):
    """
    Execute a scan using a specified Metasploit module.
    Recommended module can be found here: auxiliary/scanner/http/http_version, auxiliary/scanner/http/dir_scanner,
    auxiliary/scanner/http/robots_txt, auxiliary/scanner/http/login, auxiliary/scanner/http/csrf,
    auxiliary/scanner/http/sql_injection, auxiliary/scanner/http/command_injection.

    Args:
        module_category (str): The category of the module (e.g., 'auxiliary', 'exploit').
        module_name (str): The name of the module (e.g., 'scanner/http/crawler').
        rhosts (str): The target hosts to scan.
        rport (str): The target port to scan.

    Returns:
        dict: Results of the scan.

    Raises:
        Exception: If an error occurs during the scan execution.
    """
    client = MsfClient().get_client()

    active_module = client.modules.use(module_category, module_name)

    active_module['RHOSTS'] = rhosts
    active_module['RPORT'] = rport

    job_info: dict = active_module.execute()
    if 'uuid' in job_info.keys():
        uuid: str = job_info['uuid']
    else:
        raise Exception(f'No uuid found for module {module_category}/{module_name} - {rhosts}:{rport}')

    while True:
        info: dict = client.jobs.info_by_uuid(uuid)
        if 'error' in info and info['error']:
            print(f"Error happened: {info['error']}")
            print(f"Error class: {info['error_class']}")
            print(f"Error message: {info['error_string']}")
            print("Error backtrace:")
            for line in info['error_backtrace']:
                print(f"  {line}")
            raise Exception(f"Scan failed with error: {info['error_message']}")
        if 'status' in info.keys():
            if info['status'] == 'completed':
                return client.modules.results(uuid)
        time.sleep(10)


@pentest_tools
def msf_console_scan_tool(module_category: str, module_name: str, rhosts: str, rport: str) -> str:
    """
    Execute a Metasploit module through the console interface and return the output.

    This function creates a new Metasploit console, writes the necessary commands to execute a specified module,
    waits for the scan to complete, reads the output, and then destroys the console.

    Args:
        module_category (str): The category of the Metasploit module (e.g., 'auxiliary', 'exploit').
        module_name (str): The name of the Metasploit module (e.g., 'scanner/http/http_version').
        rhosts (str): The target hosts to scan.
        rport (str): The target port to scan.

    Returns:
        str: The output from the console after executing the module.

    Example:
        output = msf_console_scan_tool('auxiliary', 'scanner/http/http_version', '3.255.212.92', '4280')
        print(output)
    """
    client = MsfClient().get_client()
    db_connection = create_connection()
    table_name = f'msf_console_{datetime.now().strftime('%Y_%m_%d')}'
    table_fields: dict = {
        'id': ['INTEGER', 'PRIMARY KEY', 'AUTOINCREMENT'],
        'module': ['TEXT', 'NOT NULL'],
        'rhosts': ['TEXT', 'NOT NULL'],
        'rport': ['INTEGER', 'NOT NULL'],
        'output': ['TEXT']
    }

    if not create_table(db_connection, table_name, table_fields):
        raise Exception(f'Table creation failed')

    # Creating a new console
    console = client.consoles.console()
    console_id = console.cid

    try:
        output = ""
        client.consoles.console(console_id).write(f'use {module_category}/{module_name}\n')
        client.consoles.console(console_id).write(f'set RHOSTS {rhosts}\n')
        client.consoles.console(console_id).write(f'set RPORT {rport}\n')
        client.consoles.console(console_id).write(f'run\n')

        # Write down the starting time
        start_time = time.time()

        while True:
            response = client.consoles.console(console_id).read()
            output += response['data']

            if any(keyword in output for keyword in KEYWORDS):
                break

            # Check if the timeout has expired
            if time.time() - start_time > TIMEOUT:
                timeout_message = '[TIMEOUT] "Time limit exceeded, exiting the loop."'
                output += timeout_message
                print(timeout_message)
                break

            time.sleep(1)
    finally:
        # Destroying the console
        client.consoles.console(console_id).destroy()

    # Use a regular expression to search for strings starting with [*]
    pattern = re.compile(r'^\[.*?].*$', re.MULTILINE)
    matches = pattern.findall(output)

    # Combine the found strings into one result
    filtered_output = '\n'.join(matches)

    # Add a result in a database
    table_values = {'module': f'{module_category}/{module_name}', 'rhosts': rhosts, 'rport': rport,
                    'output': filtered_output}
    insert_data(db_connection, table_name, table_values)

    return filtered_output

# dvwa_modules = [
#     # "auxiliary/scanner/http/http_version",      # Checks the HTTP server version
#     # "auxiliary/scanner/http/dir_scanner",       # Scans directories on the web server
#     # "auxiliary/scanner/http/robots_txt",        # Extracts the contents of the robots.txt file
#     "auxiliary/scanner/http/crawler"
# ]

# msf_modules = read_file_to_list("modules.txt", "/Users/dpetrushenko/PycharmProjects/Neural nets/autogen_agent/
# resources")

# auxiliary_modules = [module for module in msf_modules if 'scanner/http/' in module]
# for module in auxiliary_modules:
# module='scanner/http/crawler'
# print(f"Starting {module}")
# msf_console_scan_tool(
#     module_category='auxiliary',
#     module_name=module,
#     rhosts='54.171.220.132',
#     rport='4280')
# print('All done')

# Пример использования
# module_category = 'auxiliary'
# module_name = 'scanner/http/crawler'
# rhosts = '54.171.220.132'
# rport = '4280'
#
#
# try:
#     results = msf_scan_tool(module_category, module_name, rhosts, rport)
#     print("Scan results:", results)
# except Exception as e:
#     print(f"An error occurred: {e}")
