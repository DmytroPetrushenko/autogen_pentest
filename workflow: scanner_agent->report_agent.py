import os

import autogen

from agents.for_group_chat.executor_agents import ExecutorAgent, ExecuteInDocker
from agents.for_group_chat.reporter_agents import ReporterAgent
from agents.for_group_chat.scanner_agents import NmapScannerAgent
from utils.groupchat_utils import registration_tools_in_agents

config_list = autogen.config_list_from_json(
    "OAI_CONFIG_LIST",
    file_location=os.getcwd(),
    filter_dict={
        "model": ["gpt-4", "gpt-4-0314", "gpt4", "gpt-4-32k", "gpt-4-32k-0314", "gpt-4-32k-v0314",
                  "gpt-4-turbo-2024-04-09"],
    }
)

llm_config_scanner = {"config_list": config_list, "cache_seed": 42}
llm_config_reporter = {"config_list": config_list, "cache_seed": 10045}
llm_config_manager = {"config_list": config_list, "cache_seed": 10000045}


executor_env = ExecuteInDocker(image="nmap_python_image:latest",
                               container_name="autogen_python_container")
executor_agent = ExecutorAgent(code_execution_config={'executor': executor_env})

nmap_scanner_agent = NmapScannerAgent(
    llm_config=llm_config_scanner,
    system_message="You are an Nmap Scan Agent."
                   "YOUR GOAL: Scan hosts using Nmap tools from the list provided"
                   "Instructions:"
                   "Step 1.0: Get a task from Initializer_agent."
                   "Step 1.1: Learn docstring of each function from your tools "
                   "Step 1.2: Select the most suitable function from your tools list and explain your choice."
                   "Step 2: Perform the task using one function from your tools and executor_agent."
                   "Step 3: Send result to Reporter_agent."
)

# nmap_scanner_agent = NmapScannerAgent(
#     llm_config=llm_config_scanner,
#     name="Mock_nap_scanner_agent",
#     description="Simulate perform a network scan on a host using nmap_scanner_mock.",
#     system_message="You are Mock Nmap Scan Agent."
#                    "YOUR GOAL: Simulate scanning hosts using Nmap tools from the list provided"
#                    "Instructions:"
#                    "Step 1: Get a task from Initializer_agent."
#                    "Step 1.1: write what tools you chose and why!"
#                    "Step 2: Use tool -> 'nmap_scanner_mock' from your tools and executor_agent."
#                    "Step 3: Send result to Reporter_agent."
# )

reporter_agent = ReporterAgent(
    llm_config=llm_config_reporter,
    system_message="You are a Reporter Agent."
                   "YOUR GOAL: Generate a security report based on the obtained scan results, "
                   "following OWASP standards."
                   "Instructions:"
                   "Step 1: Receive scan results from Nmap_scanner_agent."
                   "Step 2: Analyze the scan results using your expertise and tools in alignment with OWASP standards."
                   "Step 3: Compile and write the security report to a file using the writer_to_file tool and executor_"
                   "agent."
)

initializer_agent = autogen.UserProxyAgent(
    name="Initializer_agent",
    human_input_mode="TERMINATE"
)

registration_tools_in_agents(nmap_scanner_agent, "register_for_llm", "nmap_tools")
registration_tools_in_agents(reporter_agent, "register_for_llm", "work_with_file_tools")
registration_tools_in_agents(executor_agent, "register_for_execution", "nmap_tools")
registration_tools_in_agents(executor_agent, "register_for_execution", "work_with_file_tools")


def state_transition(last_speaker, groupchat):
    messages = groupchat.messages

    if last_speaker is initializer_agent:
        # init -> retrieve
        return nmap_scanner_agent
    elif last_speaker is nmap_scanner_agent:
        # retrieve: action 1 -> action 2
        return executor_agent
    elif last_speaker is executor_agent:
        if messages[-1]["content"] == "exitcode: 1":
            # retrieve --(execution failed)--> retrieve
            return nmap_scanner_agent
        elif messages[-1]["content"] == "written in file" and messages[-2]["name"] == "Reporter_agent":
            return None
        else:
            # retrieve --(execution success)--> research
            return reporter_agent
    elif last_speaker is reporter_agent:
        # research -> end
        return executor_agent


groupchat = autogen.GroupChat(
    agents=[initializer_agent, nmap_scanner_agent, executor_agent, reporter_agent],
    messages=[],
    max_round=20,
    speaker_selection_method=state_transition,
)
manager = autogen.GroupChatManager(groupchat=groupchat, llm_config=llm_config_manager)

initializer_agent.initiate_chat(
    manager, message="scan without port - >63.251.228.0/24"
)
